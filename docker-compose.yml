version: '2'
services:
  # The main controlling webserver.
  webserver:
    build:
      context: .
      dockerfile: Dockerfile-spfy
    image: backend
    ports:
    - "8000:80"
    depends_on:
    - redis
    volumes:
    - /datastore
    # networks:
    #   - dockernet

  # The ReactJS app for the frontend.
  grouch:
    build:
      context: .
      dockerfile: Dockerfile-grouch
    image: grouch
    ports:
    - "8090:5000"
    depends_on:
    - webserver
    # networks:
    #   - dockernet

  # The main set of RQ workers.
  worker:
    build:
      context: .
      dockerfile: Dockerfile-rq
    image: backend-rq
    ports:
    - "9181:9181" #this is for debugging, drop a shell and run rq-dashboard if you need to see jobs
    volumes_from:
    - webserver
    depends_on:
    - webserver
    # networks:
    #   - dockernet

  # The small set of workers specific to phylotyper's env.
  worker-phylotyper:
    build:
      context: .
      dockerfile: Dockerfile-rq-phylotyper
    image: backend-rq-phylotyper
    ports:
    - "9181:9181" #this is for debugging, drop a shell and run rq-dashboard if you need to see jobs
    volumes_from:
    - webserver
    depends_on:
    - webserver
    # networks:
    #   - dockernet

  # Reserved RQ worker for creating & syncing Spfy IDs.
  worker-blazegraph-ids:
    build:
      context: .
      dockerfile: Dockerfile-rq-blazegraph
    image: backend-rq-blazegraph
    volumes_from:
    - webserver
    depends_on:
    - webserver
    # networks:
    #   - dockernet

  # Extra priority workers serving the frontend.
  worker-priority:
    build:
      context: .
      dockerfile: Dockerfile-rq-priority
    image: backend-rq-priority
    volumes_from:
    - webserver
    depends_on:
    - webserver

  # Redis DB for the RQ workers + some frontend tasks.
  redis:
    image: redis:3.2
    # networks:
    #   - dockernet

  # Blazegraph DB for LTS.
  blazegraph:
    build:
      context: ./docker-blazegraph/2.1.4-inferencing
      dockerfile: Dockerfile # inherits the context from above.
    image: blazegraph
    ports:
      - "8080:8080"
    volumes:
      - /var/lib/jetty/

  # MongoDB for token based accounts.
  mongodb:
    image: mongo:3.6.1-jessie
    environment:
      - MONGO_DATA_DIR=/data/db
      - MONGO_LOG_DIR=/dev/null
    volumes:
      - /data/db

# networks:
#   dockernet:
#     driver: bridge
#     ipam:
#       config:
#         - subnet: 192.168.0.0/24
#           gateway: 192.168.0.1
